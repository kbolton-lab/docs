#!/bin/bash
# mutect 0.0.1
# Generated by dx-app-wizard.
#
# Scatter-process-gather execution pattern: Your app will split its
# input into multiple pieces, each of which will be processed in
# parallel, after which they are gathered together in some final
# output.


main() {
    set -ex -o pipefail

    echo "Value of reference: '$reference'"
    echo "Value of reference: '$reference_index'"
    echo "Value of reference: '$reference_dict'"
    echo "Value of tumor_bam: '$tumor_bam'"
    echo "Value of tumor_bam: '$tumor_bai'"
    echo "Value of normal_bam: '$normal_bam'"
    echo "Value of normal_bam: '$normal_bai'"
    echo "Value of interval_list: '$interval_list'"

    dx-download-all-inputs --parallel
    input_to_scatter=$interval_list

    echo "before scatter"
    scatter_job=$(dx-jobutil-new-job scatter \
        -i input_to_scatter="$input_to_scatter")
    dx wait ${scatter_job}
    #jbor="-i scat:array:jobref=${scatter_job}:array_of_scattered_input"
    #-i "array_of_file_ids:array:jobref=${scatter_job}:array_of_file_ids" \
    echo "before map"
    map_job=$(dx-jobutil-new-job map \
        -i "array_of_file_ids:array:file=${scatter_job}:array_of_file_ids" \
        -i "reference=${reference}" \
        -i "reference_index=${reference_index}" \
        -i "reference_dict=${reference_dict}" \
        -i "tumor_bam=${tumor_bam}" \
        -i "tumor_bai=${tumor_bai}" \
        -i "normal_bam=${normal_bam}" \
        -i "normal_bai=${normal_bai}")
    echo "after map"
    
  
    output_name='merged.mutect.filtered.vcf.gz'
    postprocess_job=$(dx-jobutil-new-job postprocess \
        -i process_outputs:array:jobref="$map_job":process_outputs \
        -i output_name:string="$output_name" \
        --depends-on $map_job)
    echo "after postprocess"

    dx-jobutil-add-output vcf --class=jobref "$postprocess_job":vcf 
    dx-jobutil-add-output vcf_index --class=jobref "$postprocess_job":vcf_index
}

scatter() {
    set -ex -o pipefail
    echo "Value of input_to_scatter: '${input_to_scatter}'"
    echo "scattering"
    dx-download-all-inputs
  
    # Fill in code here to do whatever is necessary to scatter the
    # input.
    docker load -i /picard.tar.gz
    output_dir="out"
    mkdir $output_dir
    scatter_count=10

    docker run --rm -v /home/dnanexus:/home/dnanexus -v /mnt/UKBB_Exome_2021:/mnt/UKBB_Exome_2021 -v /usr/bin/:/usr/local/bin -w /home/dnanexus broadinstitute/picard:2.23.6 \
        /usr/bin/perl /usr/local/bin/split_interval_list_helper.pl /home/dnanexus/${output_dir} ${input_to_scatter_path} ${scatter_count}

    scattered_input=( $(ls ${output_dir}/*.interval_list) )
    #array_of_file_ids=()
    for piece in "${scattered_input[@]}"
    do
        #array_of_file_ids+=($(dx upload --brief "$piece"))
        piece_upload=$(dx upload --brief "$piece")
        dx-jobutil-add-output array_of_file_ids --class=array:file "$piece_upload" --array
    done
    dx describe 
    #dx-jobutil-add-output array_of_file_ids --class=string "${array_of_file_ids[@]}"
   
}

map() {
    set -ex -o pipefail
    echo "Value of array_of_file_ids: '${#array_of_file_ids[@]}'"
    echo "Value of array_of_file_ids[@]: '${array_of_file_ids[@]}'" 
    # print few files that aren't ones being scattered 
    echo "Value of reference: '${reference}'"
    echo "Value of tumor_bai: '${tumor_bai}'"
    #eval process_args=("$process_inputs")
    ## might need counter i.e. a "shard" like Cromwell
    i=1
    for interval_file in "${array_of_file_ids[@]}"
    do
        echo "Value of interval_file: '${interval_file}'"
        #dx download ${interval_file}
        echo "Value of interval_file: '${interval_file_path}'"
        echo "map of scatter loop describe $i"
        #dx describe ${interval_file}
        echo "Value of tumor_bai: '${tumor_bai}'"
        
        ## ${interval_file} is a "file-xxx" id that is a string
        process_job=$(dx-jobutil-new-job process \
            -i interval_file="${interval_file}" \
            -i reference="$reference" \
            -i reference_index="$reference_index" \
            -i reference_dict="$reference_dict" \
            -i tumor_bam="$tumor_bam" \
            -i tumor_bai="$tumor_bai" \
            -i normal_bam="$normal_bam" \
            -i normal_bai="$normal_bai" \
            -i shard:string="shard-${i}")
        echo "$i.before"
        dx-jobutil-add-output process_outputs \
            --class=jobref ${process_job}:vcf --array
        dx-jobutil-add-output process_outputs \
            --class=jobref ${process_job}:vcf_index --array 
        let "i=i-1"
        echo "$i.after"
    done
}

process() {
    set -ex -o pipefail
    echo "processing"
    echo "Value of interval_file: '${interval_file}'"
    echo "Value of reference: '${reference}'"
    echo "Value of reference_index: '${reference_index}'"
    echo "Value of reference_dict: '${reference_dict}'"
    echo "Value of tumor_bam: '${tumor_bam}'"
    echo "Value of tumor_bai: '${tumor_bai}'"
    echo "Value of normal_bam: '${normal_bam}'"
    echo "Value of normal_bai: '${normal_bai}'"
    echo "Value of shard: '${shard}'"
    # Fill in code here to process the input and create output.
    dx-download-all-inputs
    mv $tumor_bai_path ~/in/tumor_bam
    mv $normal_bai_path ~/in/normal_bam
    docker load -i /gatk.tar.gz

    ## probably needs ${interval_file_path}  
    docker run --rm -v /home/dnanexus:/home/dnanexus -v /mnt/UKBB_Exome_2021:/mnt/UKBB_Exome_2021 -v /usr/bin/:/usr/local/bin -w /home/dnanexus broadinstitute/gatk:4.2.0.0 \
        /bin/bash /usr/local/bin/Mutect2.sh shard-${shard}.mutect.vcf.gz ${reference_path} ${tumor_bam_path} ${normal_bam_path} ${interval_file_path}

    vcf=$(dx upload shard-${shard}.mutect.vcf.gz --brief)
    dx-jobutil-add-output vcf --class=file "$vcf" 

    vcf_index=$(dx upload shard-${shard}.mutect.vcf.gz.tbi --brief)
    dx-jobutil-add-output vcf_index --class=file "$vcf_index"
}

postprocess() {
    set -ex -o pipefail
    echo "Value of process_outputs: '${process_outputs[@]}'"
    echo "Value of output_name: '${output_name}'"

    # download vcfs and vcf indices
    mkdir -p /tmp/mutect
    cd /tmp/mutect
    for process_output in "${process_outputs[@]}" 
    do
        dx download "$process_output"
        echo "$process_output_path"
    done
    ls -1sh /tmp/mutect/*.vcf.gz*

    cd /home/dnanexus
    docker load -i /bcftools.tar.gz

    docker run --rm -v /home/dnanexus:/home/dnanexus -v /mnt/UKBB_Exome_2021:/mnt/UKBB_Exome_2021 -v /usr/bin/:/usr/bin -w /home/dnanexus kboltonlab/sam_bcftools_tabix_bgzip:1.0 \
        /usr/local/bin/bcftools merge --merge none -Oz -o ${output_name} /tmp/mutect/*.vcf.gz && tabix ${output_name}

    dx-jobutil-add-output vcf --class=file "${output_name}"  
    dx-jobutil-add-output vcf_index --class=file "${output_name}.tbi" 
}
