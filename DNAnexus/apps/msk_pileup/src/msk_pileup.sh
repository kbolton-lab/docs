#!/bin/bash
# msk_pileup 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {
    set -ex -o pipefail

    echo "Value of vcf: '$vcf'"
    echo "Value of reference: '$reference'"
    echo "Value of reference_index: '$reference_index'"
    echo "Value of mapq: '$mapq'"
    echo "Value of baseq: '$baseq'"
    echo "Value of normal_bams: '${normal_bams[@]}'"

    dx-download-all-inputs --parallel
  
    mv $vcf_path .
    ls $vcf_name
    mv $reference_path .
    ls $reference_name
    mv $reference_index_path .
    ls $reference_index_name
    # mv $dockerimage_msk_getbasecounts_path .
    # ls $dockerimage_msk_getbasecounts_name
    # ls $dockerimage_fisher_julia_path
    # mv $dockerimage_R_path .
    # ls $dockerimage_R_name .
    mv $dockerimage_msk_getbasecountsR_path .
    ls $dockerimage_msk_getbasecountsR_name .


    
   
    vcf_filename=$(basename -- "$vcf_name")
    extension="${vcf_filename##*.}"
    if [[ $extension == "gz" ]]; then
        gunzip $vcf_name
        vcf_filename=$(basename $vcf_name .gz)
    fi

    ## get basename of <nameroot>.vcf file
    ## get <eid>_23153_0_0 from <eid>_23153_0_0.<suffix>
    eid_nameroot=$(echo $vcf_name | cut -d'.' -f1)
    # nameroot="${vcf_filename%.*}"

    msk_out="$eid_nameroot.normal.pileup.vcf"

    bams=""
    for bam in "${normal_bams_path[@]}"; do
        bam_filename=$(basename -- "$bam")
        mv $bam .
        extension="${bam_filename##*.}"
        echo $extension
        if [[ $extension == "bam" ]]; then
            sample_name=$(samtools view -H $bam_filename | /usr/bin/perl -nE 'say $1 if /^\@RG.+\tSM:([ -~]+)/' | head -n 1)
            bams="$bams --bam $sample_name:$bam_filename"
        fi    
    done

   
    #docker load -i $dockerimage_msk_getbasecounts_name
    docker load -i $dockerimage_msk_getbasecountsR_name
    docker run --rm -v /home/dnanexus:/home/dnanexus -v /mnt/UKBB_Exome_2021:/mnt/UKBB_Exome_2021 -v /usr/local/msk/bin/:/usr/local/msk/bin -w /home/dnanexus kboltonlab/msk_getbasecounts:3.0 \
        /bin/bash /usr/local/msk/bin/MSK.sh $reference_name "$bams" $vcf_filename $msk_out $eid_nameroot

    vcf_out=$(dx upload $eid_nameroot.fisherPON.vcf.gz --brief)
    vcf_out_index=$(dx upload $eid_nameroot.fisherPON.vcf.gz.tbi --brief)
    vcf_normal_out=$(dx upload $msk_out.gz --brief)


    # vcf_normal_out=$(dx upload $msk_out.gz --brief)
    # sample_vcf=$(dx upload $nameroot.sample.pileup.vcf.gz --brief)
    # fisher_input=$(dx upload $nameroot.fisher.input --brief)

    
    dx-jobutil-add-output vcf_out "$vcf_out" --class=file
    dx-jobutil-add-output vcf_out_index "$vcf_out_index" --class=file
    dx-jobutil-add-output vcf_normal_out "$vcf_normal_out" --class=file
    
    
    # dx-jobutil-add-output vcf_normal_out "$vcf_normal_out" --class=file
    # dx-jobutil-add-output sample_vcf "$sample_vcf" --class=file
    # dx-jobutil-add-output fisher_input "$fisher_input" --class=file
}
