#!/bin/bash
# declutter 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    set -ex -o pipefail

    echo "Value of final_tsv: '$final_tsv'"
    echo "Value of sample_bqsr_delete: '$sample_bqsr_delete'"
    echo "Value of project: '$project'"
    echo "Value of bqsr_spark: '$bqsr_spark'" # bqsr_spark job name
    echo "Value of mutect: '$mutect'" # mutect job name
    echo "Value of vardict: '$vardict'" # vardict job name

   
    dx-download-all-inputs --parallel

    analysis=$(dx describe $DX_JOB_ID --json | jq -r .rootExecution)
    bqsr_job=$(dx describe $analysis --json | jq --arg bqsr_spark "$bqsr_spark" -r '.stages[] | .execution | select( .name == $bqsr_spark ) | .id')
    # mutect and vardict depend
    
    mutect_job=$(dx describe $analysis --json | jq --arg mutect "$mutect" -r '.stages[] | .execution | select( .name == $mutect ) | .id')
    vardict_job=$(dx describe $analysis --json | jq --arg vardict "$vardict" -r '.stages[] | .execution | select( .name == $vardict) | .id')

    bqsr_state=$(dx describe $bqsr_job --json | jq -r '.state')
    bqsr_depends=$(dx describe $bqsr_job --json | jq -r '.dependsOn' | jq length)

    mutect_state=$(dx describe $mutect_job --json | jq -r '.state')
    mutect_depends=$(dx describe $mutect_job --json | jq -r '.dependsOn' | jq length)

    vardict_state=$(dx describe $vardict_job --json | jq -r '.state')
    vardict_depends=$(dx describe $vardict_job --json | jq -r '.dependsOn' | jq length)

    ## if job success but workflow restarts the depends might still show so just make sure these are done
    if [[ $bqsr_state == "done" && $mutect_state == "done" && $vardict_state == "done" ]]; then
    # if [[ $bqsr_state == "done" && $bqsr_depends -eq 0 && $mutect_state == "done" && $mutect_depends -eq 0 && $vardict_state == "done" && $vardict_depends -eq 0 ]]; then
        echo yes
        bqsr_bam_delete=$(dx describe $bqsr_job --json | jq -r '.output.bam_out."$dnanexus_link"')
        bqsr_bai_delete=$(dx describe $bqsr_job --json | jq -r '.output.bam_out_index."$dnanexus_link"')
        
        if [[ $(dx ls "$project:$bqsr_bam_delete" | wc -l) -gt 0 ]]; then
            dx rm "$project:$bqsr_bam_delete"
            if [[ $(dx ls "$project:$bqsr_bam_delete" | wc -l) -eq 0 ]]; then
                dx-jobutil-add-output success_bam "Success" --class=string
            else
                dx-jobutil-add-output success_bam "Failed" --class=string
            fi
        else 
            dx-jobutil-add-output success_bam "Success" --class=string
            echo "bam already deleted"
        fi

        if [[ $(dx ls "$project:$bqsr_bai_delete" | wc -l) -gt 0 ]]; then
            dx rm "$project:$bqsr_bai_delete"
            if [[ $(dx ls "$project:$bqsr_bai_delete" | wc -l) -eq 0 ]]; then
                dx-jobutil-add-output success_bai "Success" --class=string
            else
                dx-jobutil-add-output success_bai "Failed" --class=string
            fi
        else 
            dx-jobutil-add-output success_bai "Success" --class=string
            echo "bai already deleted"
        fi
    else 
        dx-jobutil-add-output success_bam "Failed" --class=string
        dx-jobutil-add-output success_bai "Failed" --class=string
        echo no
    fi

    # if [[ $(dx ls $bqsr_bam_delete | wc -l) -eq 0 && $(dx ls $bqsr_bam_delete | wc -l) -eq 0 ]]; then
    #     dx-jobutil-add-output success "Success" --class=string
    # else
    #     dx-jobutil-add-output success "Failed" --class=string
    # fi

}
