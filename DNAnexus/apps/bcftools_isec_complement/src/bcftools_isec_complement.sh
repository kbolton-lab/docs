#!/bin/bash
# bcftools_isec_complement 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of vcf_in: '$vcf_in'"
    echo "Value of vcf_in_index: '$vcf_in_index'"
    echo "Value of exclude_vcf: '$exclude_vcf'"
    echo "Value of exclude_vcf_index: '$exclude_vcf_index'"
    echo "Value of output_type: '$output_type'"
    echo "Value of output_vcf_name: '$output_vcf_name'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    #dx download "$vcf_in" -o vcf_in

    #dx download "$exclude_vcf" -o exclude_vcf
    dx-download-all-inputs --parallel
    echo $vcf_in_index_path
    mv $vcf_in_index_path ~/in/vcf_in
    echo "ls ~/in/vcf_in"
    ls ~/in/vcf_in
    echo
    
    mv $exclude_vcf_index_path ~/in/exclude_vcf
    echo "ls ~/in/exclude_vcf"
    ls ~/in/exclude_vcf
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.
    docker load -i /bcftools.tar.gz

    # docker run --rm -v /home/dnanexus:/home/dnanexus -v /mnt/UKBB_Exome_2021:/mnt/UKBB_Exome_2021 -w /home/dnanexus kboltonlab/sam_bcftools_tabix_bgzip:1.0 which bcftools

    docker run --rm -v /home/dnanexus:/home/dnanexus -v /mnt/UKBB_Exome_2021:/mnt/UKBB_Exome_2021 -w /home/dnanexus kboltonlab/sam_bcftools_tabix_bgzip:1.0 bash -c "/usr/local/bin/bcftools isec -C -w1 ${vcf_in_path} ${exclude_vcf_path} -O${output_type} -o ${output_vcf_name} && tabix ${output_vcf_name}" 



    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    complement_vcf=$(dx upload ${output_vcf_name} --brief)
    complement_vcf_index=$(dx upload ${output_vcf_name}.tbi --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output complement_vcf "$complement_vcf" --class=file
    dx-jobutil-add-output complement_vcf_index "$complement_vcf_index" --class=file
}
